clear;
close all;

T = 1000; % no. time instants
dT = 1;

A = [1, 0, dT, 0;
     0, 1, 0, dT;
     0, 0, 1, 0;
     0, 0, 0, 1];

sig_x = 0;
sig_y = 0;
sig_dx = 0.01;
sig_dy = 0.01;
R = 10 * eye(2);
Q = [sig_x, 0, 0, 0;
     0, sig_y, 0, 0;
     0, 0, sig_dx, 0;
     0, 0, 0, sig_dy;];
H = [eye(2), zeros(2)];

x = zeros(T, 4);
y = zeros(T, 2);
x_0 = [10000, 10000, 1, 0];

P_next = 1000 * eye(4);

y_0 = x_0(:, 1:2);
[x, y] = measurement_sequence(T, x_0, y_0, A, H, Q, R);
noise = x(:, 1:2)-y;

%% 2.1 Data Generation
figure Name '2.1 Data Gen'
subplot(2, 2, 1);
title("Raw Position (X_{truth}[1] vs X_{truth}[2])");
hold on
plot(x(:, 1), x(:, 2));

subplot(2, 2, 2);
title("Measured Position (Y[1] vs Y[2])");
hold on
plot(y(:, 1), y(:, 2));

subplot(2, 2, 3);
title("Noise of x value (X_{truth}[1] - Y[1] vs k)");
hold on
plot(1:T, noise(:,1)');

subplot(2, 2, 4);
title("Noise of y value (X_{truth}[2] - Y[2] vs k)");
hold on
plot(1:T, noise(:,1)');

%% 2.2 Kalman Filter
x_hat = kf(T)



%% Data Generation
function [x_truth, y_meas] = measurement_sequence(len, x_0, y_0, A, H, Q, R)
    x_truth = zeros([len 4]);
    y_meas = zeros([len 2]);
    
    x_truth(1, :) = x_0;
    y_meas(1, :) = y_0;
    for k = 2:len
        x_truth(k, :) = A * x_truth(k-1, :)' + Q*randn([4 1]);
        y_meas(k, :) = H * x_truth(k, :)' + R*randn([2 1]);
    end
end

%% Kalman Filter Sequence
function x_hat = kalman_sequence(T, x_hat_0)
    x_hat = zeros(T, 4);
    x_hat
    for k = 2:T
        P_prev = P_next;
        [x_pred, P_pred] = kalman_predict(A, x_hat(k-1, :), P_prev, Q);
        z_k = y(k, :);
        [x_hat(k, :), P_next] = kalman_measure(x_pred, P_pred, z_k, H, R);
    end
end

%% Kalman Time Update
function [x_pred, P_pred] = kalman_predict(A_prev, x_prev, P_prev, Q_prev)
    x_pred = (A_prev*x_prev')';
    P_pred = A_prev*P_prev*A_prev' + Q_prev;
end

%% Kalman Meas Update
function [x_est, P] = kalman_measure(x_pred, P_pred, z, H, R)
    K = P_pred*H'*inv(H*P_pred*H'+R);
    x_est = x_pred + (K*(z'-H*x_pred'))';
    P = (eye(4) - K*H)*P_pred;
end

%% Compact Representation Kalman Update
function [x_hat_k, P_next_pred] = kalman_update(A_prev, x_hat_prev, y, P_pred, R, Q, H)
    K = inv(P_pred .* H' .* (H.*P_pred.*H' + R));
    x_hat = A_prev .* x_hat_prev + K.*(y - H.*A_prev.*x_hat_prev);
    P_next_pred = A .* (P_pred - K.*H.*P_pred).*A' + Q;
end